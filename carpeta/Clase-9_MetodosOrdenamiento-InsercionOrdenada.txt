* Inserción ordenada

- Si queremos insertar un elemento en un vector, a veces no importa el orden, en ese caso podemos insertar el numero elemento así:

#define MAX_NUMEROS 10

int numeros[MAX_NUMEROS] = {1, 3, 5, 7, 9};
int tope_numeros = 5;

int numero_elemento = 2; 

numeros[tope_numeros] = numero_elemento; // 1 3 5 7 9 2

tope_numeros++;

Acá creamos el nuevo elemento, lo guardamos en la posicion del tope y aumentamos el tope. Esta es la forma "clásica" de insertar un elemento en un vector

- Si queremos que se inserte ordenadamente, dígase, que si es un 2 se inserte donde debería ir el dos, habría que hacer algo así:

// Pre: 0 <= tope_vector <= MAX_VECTOR
// Post: Devuelve 0 si se inserto correctamente, -1 si no habia espacio para insertar el numero y
//       1 si el numero ya estaba en el vector
int insertar_numero_ordenado(int vector_numeros[MAX_NUMEROS], int* tope_vector_numeros, int numero_para_insertar){
    
    bool agregado = false;

    if(*tope_vector_numeros == MAX_NUMEROS)
        return -1; // No hay espacio para insertar el numero

    int indice = *tope_vector_numeros;
    while (indice > 0 && !agregado) {
        
        if (vector_numeros[indice - 1] == numero_para_insertar)
            return 1; // El numero ya estaba en el vector

        else if(vector_numeros[indice - 1] > numero_para_insertar)
            vector_numeros[indice] = vector_numeros[indice - 1];
        else if (!agregado){
            vector_numeros[indice] = numero_para_insertar;
            agregado = true;
        }
        
        indice--;
    }
    
    if(!agregado)
        vector_numeros[0] = numero_para_insertar;
    
    (*tope_vector_numeros)++;
    
    return 0; // Se inserto correctamente el numero
}

Esta función, primero chequea que haya espacio en el vector y, si lo hay, luego inserta el numero en la posción en la que va. También chequea que el numero no esté repetido.
Es una funcion y no un procedimiento para poder tener conocimiento de si funcionó la inserción o no, quedando el main así:

int main(){
    
    int numeros[MAX_NUMEROS] = {1, 3, 5, 6, 7};
    int tope_numeros = 5;

    imprimir_vector_numeros(numeros, tope_numeros);

    int numero_insertar = -1;

    int insercion = insertar_numero_ordenado(numeros, &tope_numeros, numero_insertar);

    if(insercion == -1){
        printf("No había espacio para insertar ese numero.\n");
        imprimir_vector_numeros(numeros, tope_numeros);
    }
    else if (insercion == 0){
        printf("Se inserto correctamente el numero.\n");
        imprimir_vector_numeros(numeros, tope_numeros);
    } else if (insercion == 1) {
        printf("El numero ya estaba en el vector.\n");
        imprimir_vector_numeros(numeros, tope_numeros);
    }
    
    else {
        printf("Hubo algun tipo de error.");
    }

    return 0;
}

* Métodos de ordenamiento

- Ordenamiento por insercion:
	
	Supongamos que tenemos un vector de numeros desordenado
	
	| 3 | 2 | 5 | 1 | 4 |
	
	Vamos a tomar el vector, nos paramos en el primer elemento y asumimos que está ordenado
	
	¡ 3 ! 2 | 5 | 1 | 4 |
	
	Ahora nos movemos uno a la derecha y verificamos si sigue ordenado
	
	¡ 3 | 2 ! 5 | 1 | 4 | // No está ordenado
	
	No está ordenado, así que lo insertamos ordenadamente (como vimos antes con la Inserción Ordenada)
	
	¡ 2 | 3 ! 5 | 1 | 4 | // Está ordenado

	Ahora repetimos para cada elemento
	
	¡ 2 | 3 | 5 ! 1 | 4 | // Está ordenado
	// Chequeo movimiendo uno a la derecha
	¡ 2 | 3 | 5 | 1 ! 4 | // No está ordenado
	// Inserción ordenada
	¡ 1 | 2 | 3 | 5 ! 4 | // Está ordenado
	// Chequeo movimiendo uno a la derecha
	¡ 1 | 2 | 3 | 5 | 4 ! // No está ordenado
	// Inserción ordenada
	¡ 1 | 2 | 3 | 4 | 5 ! // Está ordenado
	// Chequeo movimiendo uno a la derecha
	// No hay más elementos
	| 1 | 2 | 3 | 4 | 5 |
	
Como ya no hay más elementos podemos decir que está ordenado por inserción
	
- Ordenamiento por burbujeo

	Supongamos que tenemos un vector de numeros desordenado
	
	| 3 | 2 | 5 | 1 | 4 |
	
	Vamos a tomar el primer elemento y lo vamos a comparar con el siguiente, si nuestro primer elemento es más grande que el 2do los vamos a intercambiar de posicion
	
	¡ 3 | 2 ! 5 | 1 | 4 |
	// 3 es más grande que 2, así que los cambiamos
	¡ 2 | 3 ! 5 | 1 | 4 |
	
	Y ahora volvemos a chequear
	
	| 2 ¡ 3 | 5 ! 1 | 4 |
	// 3 no es más grande que 5, así que lo dejamos así
	| 2 | 3 | 5 | 1 | 4 |
	
	Ahora vamos con el 5, hasta que no se pueda mover más
	
	| 2 | 3 ¡ 5 | 1 ! 4 |
	// 5 es más grande que 1, así que los cambiamos
	| 2 | 3 | 1 ¡ 5 | 4 ! // chequeamos con el siguiente
	// 5 es más grande que 4, así que los cambiamos
	| 2 | 3 | 1 | 4 | 5 | // ya no hay más elementos
	
	Volvemos a empezar
	¡ 2 | 3 ! 1 | 4 | 5 |
	// 2 no es más grande que 3, así que lo dejamos asi
	| 2 ¡ 3 | 1 ! 4 | 5 |
	// 3 es más grande que 1, así que los cambiamos
	| 2 | 1 ¡ 3 | 4 ! 5 | // chequeamos con el siguiente
	// 3 no es más grande que 4, así que los dejamos así
	// Volvemos a empezar
	¡ 2 | 1 ! 3 | 4 | 5 |
	// 2 es más grande que 1, así que los cambiamos
	| 1 ¡ 2 | 3 ! 4 | 5 | // chequeamos con el siguiente
	// 2 no es más grande que 3, así que lo dejamos asi
	// Volvemos a empezar
	¡ 1 | 2 ! 3 | 4 | 5 |
	// 1 no es más grande que 2, así que lo dejamos asi
	
	Que hayamos vuelto a empezar y ya no haya movimientos, significa que ya está ordenado el vector
	
- Ordenamiento de selección

	Supongamos que tenemos un vector de numeros desordenado
	
	| 3 | 2 | 5 | 1 | 4 |
	
	Tomamos el primer elemento y lo comparamos con el siguiente
	
	¡ 3 | 2 ! 5 | 1 | 4 |
	
	Si el 2do es más chico que el primero marcamos el segundo
	
	| 3 ¡ 2 ! 5 | 1 | 4 | // 2 es más chico que 3
	
	Ahora comparados el 2do con el siguiente
	
	| 3 ¡ 2 | 5 ! 1 | 4 |
	// 5 no es mas chico que 2, así que dejamos así
	
	Como 2 es más chico que 5 comparamos con el siguiete
	
	| 3 ¡ 2 ! | 5 | ¡ 1 ! 4 |
	// 1 es mas chico que 2, así que marcamos el 1
	| 3 | 2 | 5 ¡ 1 ! 4 |
	
	Y por último comparamos el 1 con el siguiente
	
	| 3 | 2 | 5 ¡ 1 | 4 !
	// 4 no es mas chico que 1, así que dejamos así
	| 3 | 2 | 5 ¡ 1 ! 4 |
	
	Ahora intercambiamos el 1er elemento que comparamos por el marcado
	
	| 1 | 2 | 5 | 3 | 4 |
	
	Lo que resta ahora es empezar de la posicion siguiente a la comparada antes y hacer lo mismo
	
	Continuamos con el siguiente elemento no marcado y lo comparamos con los elementos restantes:

	| 1 | 2 ¡ 5 ! 3 | 4 |
	// 5 no es más pequeño que 2, por lo que dejamos así

	Como 5 no es más pequeño que 2, pasamos al siguiente elemento:

	| 1 | 2 ¡ 5 | 3 ¡ 4 !
	// 3 no es más pequeño que 5, por lo que dejamos así

	Sin embargo, 4 es más pequeño que 5, así que lo marcamos:

	| 1 | 2 | 5 | 3 ¡ 4 ¡
	// 4 es más pequeño que 3, así que marcamos 4
	| 1 | 2 | 5 ¡ 3 ! 4 |

	Ahora, intercambiamos el primer elemento marcado (3 en este caso) con el primer elemento no marcado (5) en el segmento no ordenado:

	| 1 | 2 ¡ 3 | 5 ¡ 4 |
	// El primer elemento marcado (3) se intercambia con el primer no marcado (5)

	El segmento ordenado se expande, y continuamos con el siguiente elemento no marcado:

	| 1 ¡ 2 ! 3 | 5 | 4 |
	// 2 es más pequeño que 3, así que marcamos 2

	Procedemos a intercambiar el primer elemento marcado (2) con el primer no marcado (3):

	| 1 ¡ 2 | 3 | 5 | 4 |
	// Intercambio de 2 y 3

	El segmento ordenado se expande nuevamente:

	| 1 ¡ 2 | 3 ¡ 5 ! 4 |
	// 4 no es más pequeño que 5, así que dejamos así

	Finalmente, 4 es más pequeño que 5, así que marcamos 4:

	| 1 ¡ 2 | 3 | 5 | 4 ¡
	// 4 es más pequeño que 5, por lo que marcamos 4

	Intercambiamos el primer elemento marcado (4) con el primer no marcado (5) en el segmento no ordenado:

	| 1 | 2 | 3 | 4 ¡ 5 !
	// Intercambio de 4 y 5

	El proceso continúa hasta que se hayan recorrido todos los elementos del vector, y al final tendrás un vector ordenado por selección:

	| 1 | 2 | 3 | 4 | 5 |
	
- Codigos

Para todos los cogidos utilizo un método para intercambiar los elementos:

	// Pre:  0 <= posicion1 y posicion2 <= tope_vector
	// Post: Intercambia, del vector[], entre si los elementos que están en posicion1 y posicion2
	void intercambiar_elementos(int vector[MAX_ELEMENTOS], 
					int posicion1, int posicion2){
	    int variable_auxiliar = vector[posicion1];
	    vector[posicion1] = vector[posicion2];
	    vector[posicion2] = variable_auxiliar;
	}

Y un método para imprimir los vectores:

	// Pre: 0 <= tope_vector <= MAX_VECTOR
	void imprimir_vector_numeros(int vector_numeros[MAX_ELEMENTOS], 
				     		int tope_vector_numeros) {
	    for (int i = 0; i < tope_vector_numeros; i++) {
		printf("%i ", vector_numeros[i]);
	    }
	    printf("\n");
	}

- Codigo ordenamiento por burbujeo

	#include <stdio.h>
	
	#define MAX_ELEMENTOS 10
	
	// Pre:  0 <= tope_vector <= MAX_ELEMENTOS
	// Post: Ordena el vector de menor a mayor
	void ordenamiento_burbujeo(int vector[MAX_ELEMENTOS], int tope_vector){
	    for (int i = 0; i < (tope_vector - 1); i++) {
		for (int j = 0; j < (tope_vector - i - 1); j++) {
		    if(vector[j] > vector[j + 1]){
		        intercambiar_elementos(vector, j, j+1);
		    }
		}
	    }
	}
	
	int main(){
		int numeros[MAX_ELEMENTOS] = {3, 2, 5, 1, 4};
		int tope_numeros = 5;

		printf("Vector desordenado: \n");
		imprimir_vector_numeros(numeros, tope_numeros);

		ordenamiento_burbujeo(numeros, tope_numeros);

		printf("Vector ordenado por burbujeo: \n");
		imprimir_vector_numeros(numeros, tope_numeros);

		return 0;
	}
	
- Codigo ordenamiento por seleccion:

	#include <stdio.h>

	#define MAX_ELEMENTOS 10

	// Pre:  0 <= tope_vector <= MAX_ELEMENTOS
	// Post: Ordena el vector de menor a mayor
	void ordenamiento_seleccion(int vector[MAX_ELEMENTOS], int tope) {
	    int minimo = 0;
		for (int i = 0; i < tope-1; i++) {
			minimo = i;
			for (int j = i+1; j < tope; j++) {
				if (vector[j] < vector[minimo]) {
					minimo = j;
				}
			}
			intercambiar_elementos(vector, i, minimo);
		}
	}
	
	int main(){
	    int numeros[MAX_ELEMENTOS] = {3, 2, 5, 1, 4};
	    int tope_numeros = 5;

	    printf("Vector desordenado: \n");
	    imprimir_vector_numeros(numeros, tope_numeros);

	    ordenamiento_seleccion(numeros, tope_numeros);

	    printf("Vector ordenado por selección: \n");
	    imprimir_vector_numeros(numeros, tope_numeros);

	    return 0;
	}
	
- Codigo ordenamiento por inserción:

	// Pre:  0 <= tope_vector <= MAX_ELEMENTOS
	// Post: Ordena el vector de menor a mayor
	void ordenamiento_insercion(int vector[MAX_ELEMENTOS], int tope_vector) {
		for (int i = 1; i < tope_vector; i++) {
			int elemento_a_insertar = vector[i];
			int j = i;
			while (j > 0 && vector[j-1] > elemento_a_insertar) {
				vector[j] = vector[j-1];
				j--;
			}
			vector[j] = elemento_a_insertar;
		}	
	}

	int main(){
	    int numeros[MAX_ELEMENTOS] = {3, 2, 5, 1, 4};
	    int tope_numeros = 5;

	    printf("Vector desordenado: \n");
	    imprimir_vector_numeros(numeros, tope_numeros);

	    ordenamiento_insercion(numeros, tope_numeros);

	    printf("Vector ordenado por inserción: \n");
	    imprimir_vector_numeros(numeros, tope_numeros);

	    return 0;
	}
